#!/bin/bash
# scripts/tf
# Universal Terraform management script
# Usage: ./scripts/terraform.sh <command> <cloud> <environment> [additional-args]

set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to print usage
print_usage() {
    echo "Usage: $0 <command> <cloud> <environment> [additional-args]"
    echo ""
    echo "Commands:"
    echo "  init        Initialize Terraform"
    echo "  plan        Create execution plan"
    echo "  apply       Apply changes"
    echo "  destroy     Destroy infrastructure"
    echo "  validate    Validate configuration"
    echo "  refresh     Refresh state"
    echo "  show        Show state or resource"
    echo "  output      Get outputs"
    echo "  fmt         Format code"
    echo "  import      Import existing resource"
    echo "  state       State management commands"
    echo ""
    echo "Cloud: aws | azure"
    echo "Environment: common | staging | preprod | prod"
    echo ""
    echo "Examples:"
    echo "  $0 init aws common"
    echo "  $0 plan azure staging"
    echo "  $0 apply aws staging -auto-approve"
    echo "  $0 destroy azure preprod"
    echo "  $0 output aws common vpc_id"
    echo "  $0 show aws staging module.compute.aws_instance.app[0]"
    echo "  $0 import aws staging aws_instance.example i-1234567890abcdef0"
    echo "  $0 state aws staging list"
    echo ""
    exit 1
}

# Function to setup shared terraform cache
setup_terraform_cache() {
    local terraform_root="$(pwd)"
    local shared_cache_dir="$terraform_root/.terraform/providers"
    
    # Create shared cache directory if it doesn't exist
    mkdir -p "$shared_cache_dir"
    
    # Export plugin cache directory
    export TF_PLUGIN_CACHE_DIR="$shared_cache_dir"
    
    print_status $CYAN "Using shared plugin cache: $TF_PLUGIN_CACHE_DIR"
}

# Function to validate inputs
validate_inputs() {
    local cloud=$1
    local environment=$2
    
    if [[ ! "$cloud" =~ ^(aws|azure)$ ]]; then
        print_status $RED "Error: Cloud must be 'aws' or 'azure'"
        exit 1
    fi
    
    if [[ ! "$environment" =~ ^(common|staging|preprod|prod)$ ]]; then
        print_status $RED "Error: Environment must be 'common', 'staging', 'preprod', or 'prod'"
        exit 1
    fi
}

# Function to check if required files exist
check_required_files() {
    local deployment_dir=$1
    local backend_config=$2
    local tfvars_file=$3
    local command=$4
    
    if [ ! -d "$deployment_dir" ]; then
        print_status $RED "Error: Deployment directory '$deployment_dir' not found"
        exit 1
    fi
    
    # Backend config is required for most commands
    if [[ "$command" =~ ^(init|plan|apply|destroy|refresh|import)$ ]] && [ ! -f "$backend_config" ]; then
        print_status $RED "Error: Backend config file '$backend_config' not found"
        exit 1
    fi
    
    # Tfvars file is required for commands that need variables
    if [[ "$command" =~ ^(plan|apply|destroy|refresh)$ ]] && [ ! -f "$tfvars_file" ]; then
        # Check if using plan file
        local using_plan_file=false
        for arg in "${@:5}"; do
            if [[ "$arg" == *.tfplan ]]; then
                using_plan_file=true
                break
            fi
        done
        
        if [ "$using_plan_file" = false ]; then
            print_status $RED "Error: Terraform variables file '$tfvars_file' not found"
            exit 1
        fi
    fi
}

# Function to get confirmation for destructive operations
get_confirmation() {
    local cloud=$1
    local environment=$2
    local operation=$3
    local additional_args="$4"
    
    # Skip confirmation if auto-approve is specified
    if [[ "$additional_args" =~ "-auto-approve" ]]; then
        return 0
    fi
    
    # Extra protection for production
    if [ "$environment" = "prod" ] && [ "$operation" = "destroy" ]; then
        print_status $RED "üõë PRODUCTION ENVIRONMENT DETECTED!"
        print_status $RED "You are about to destroy PRODUCTION infrastructure in $cloud!"
        echo ""
        read -p "Type 'DELETE-PRODUCTION' to confirm: " confirm
        if [ "$confirm" != "DELETE-PRODUCTION" ]; then
            print_status $YELLOW "Operation cancelled for safety."
            exit 0
        fi
        return 0
    fi
    
    # Extra protection for common resources
    if [ "$environment" = "common" ] && [ "$operation" = "destroy" ]; then
        print_status $RED "üõë COMMON RESOURCES DETECTED!"
        print_status $RED "You are about to destroy SHARED infrastructure in $cloud!"
        print_status $RED "This will affect ALL environments that depend on these resources."
        echo ""
        read -p "Type 'DELETE-SHARED-INFRASTRUCTURE' to confirm: " confirm
        if [ "$confirm" != "DELETE-SHARED-INFRASTRUCTURE" ]; then
            print_status $YELLOW "Operation cancelled for safety."
            exit 0
        fi
        return 0
    fi
    
    # General confirmation for destructive operations
    if [[ "$operation" =~ ^(apply|destroy)$ ]]; then
        local action="apply changes to"
        if [ "$operation" = "destroy" ]; then
            action="destroy"
        fi
        
        print_status $YELLOW "‚ö†Ô∏è  You are about to $action $cloud $environment infrastructure."
        read -p "Are you sure you want to continue? (yes/no): " confirm
        if [[ ! "$confirm" =~ ^[Yy][Ee][Ss]$ ]]; then
            print_status $YELLOW "Operation cancelled."
            exit 0
        fi
    fi
}

# Function to execute terraform command
execute_terraform_command() {
    local command=$1
    local cloud=$2
    local environment=$3
    local deployment_dir=$4
    local backend_config=$5
    local tfvars_file=$6
    shift 6
    local additional_args="$@"
    
    print_status $BLUE "üìÇ Working directory: $deployment_dir"
    if [[ "$command" =~ ^(plan|apply|destroy|refresh)$ ]]; then
        # Check if using plan file
        local using_plan_file=false
        for arg in $additional_args; do
            if [[ "$arg" == *.tfplan ]]; then
                using_plan_file=true
                break
            fi
        done
        
        if [ "$using_plan_file" = false ]; then
            print_status $BLUE "üìã Variables file: $tfvars_file"
        fi
    fi
    if [ ! -z "$additional_args" ]; then
        print_status $BLUE "‚öôÔ∏è  Additional arguments: $additional_args"
    fi
    echo ""
    
    cd "$deployment_dir"
    
    case $command in
        "init")
            print_status $PURPLE "üöÄ Initializing Terraform for $cloud $environment..."
            terraform init -backend-config="../../../$backend_config"
            print_status $GREEN "‚úÖ Terraform initialization completed"
            ;;
        "plan")
            print_status $PURPLE "üìã Planning Terraform for $cloud $environment..."
            if [[ "$additional_args" =~ \.tfplan ]]; then
                terraform plan $additional_args
            else
                terraform plan -var-file="../../../$tfvars_file" $additional_args
            fi
            print_status $GREEN "‚úÖ Terraform plan completed"
            ;;
        "apply")
            print_status $PURPLE "üöÄ Applying Terraform for $cloud $environment..."
            # Check if using plan file
            local using_plan_file=false
            for arg in $additional_args; do
                if [[ "$arg" == *.tfplan ]]; then
                    using_plan_file=true
                    break
                fi
            done
            
            if [ "$using_plan_file" = true ]; then
                terraform apply $additional_args
            else
                terraform apply -var-file="../../../$tfvars_file" $additional_args
            fi
            print_status $GREEN "‚úÖ Terraform apply completed"
            ;;
        "destroy")
            print_status $PURPLE "üí• Destroying Terraform infrastructure for $cloud $environment..."
            terraform destroy -var-file="../../../$tfvars_file" $additional_args
            print_status $GREEN "üí• Terraform destroy completed"
            ;;
        "validate")
            print_status $PURPLE "üîç Validating Terraform configuration for $cloud $environment..."
            terraform fmt -check -recursive || print_status $YELLOW "Warning: Code formatting issues found"
            terraform validate
            print_status $GREEN "‚úÖ Terraform validation completed"
            ;;
        "refresh")
            print_status $PURPLE "üîÑ Refreshing Terraform state for $cloud $environment..."
            terraform refresh -var-file="../../../$tfvars_file" $additional_args
            print_status $GREEN "‚úÖ Terraform refresh completed"
            ;;
        "show")
            print_status $PURPLE "üìä Showing Terraform state for $cloud $environment..."
            if [ ! -z "$additional_args" ]; then
                terraform show $additional_args
            else
                terraform show
            fi
            ;;
        "output")
            print_status $PURPLE "üì§ Getting Terraform outputs for $cloud $environment..."
            if [ ! -z "$additional_args" ]; then
                terraform output $additional_args
            else
                terraform output
            fi
            ;;
        "fmt")
            print_status $PURPLE "üé® Formatting Terraform code for $cloud $environment..."
            terraform fmt -recursive $additional_args
            print_status $GREEN "‚úÖ Terraform formatting completed"
            ;;
        "import")
            if [ $# -lt 2 ]; then
                print_status $RED "Error: Import requires resource address and ID"
                print_status $YELLOW "Usage: $0 import $cloud $environment <resource_address> <resource_id>"
                exit 1
            fi
            local resource_address=$1
            local resource_id=$2
            shift 2
            local import_args="$@"
            
            print_status $PURPLE "üì• Importing resource into Terraform state for $cloud $environment..."
            terraform import -var-file="../../../$tfvars_file" $import_args "$resource_address" "$resource_id"
            print_status $GREEN "‚úÖ Terraform import completed"
            ;;
        "state")
            print_status $PURPLE "üóÇÔ∏è  Managing Terraform state for $cloud $environment..."
            terraform state $additional_args
            ;;
        *)
            print_status $RED "Error: Unknown command '$command'"
            print_usage
            ;;
    esac
}

# Main script logic
main() {
    # Check if minimum arguments provided
    if [ $# -lt 3 ]; then
        print_usage
    fi
    
    local command=$1
    local cloud=$2
    local environment=$3
    shift 3
    local additional_args="$@"
    
    # Setup shared cache
    setup_terraform_cache
    
    # Validate inputs
    validate_inputs "$cloud" "$environment"
    
    # Set paths
    local deployment_dir="infra/${cloud}/${environment}"
    local backend_config="config/${cloud}/${environment}/backend.conf"
    local tfvars_file="config/${cloud}/${environment}/terraform.tfvars"
    
    # Check required files
    check_required_files "$deployment_dir" "$backend_config" "$tfvars_file" "$command" $additional_args
    
    # Get confirmation for destructive operations
    get_confirmation "$cloud" "$environment" "$command" "$additional_args"
    
    # Execute terraform command
    execute_terraform_command "$command" "$cloud" "$environment" "$deployment_dir" "$backend_config" "$tfvars_file" $additional_args
    
    print_status $GREEN "üéâ Operation completed successfully!"
}

# Run main function
main "$@"
